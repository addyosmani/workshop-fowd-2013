create post steps
- classname

- template
- - logout button
- - form
- - username
- - input box
- - post button

- render

- events
- - click logout
- - click post button
- - - give them the postId code because it's weird
  // We need a unique id for saving this as well as
  // referencing it when we save comments for a post
  getNewPostId: function(){
    if(!this.newPostId) {
      this.newPostId = this.collection.length;
    }
    this.newPostId++;
    return this.newPostId;
  },
- - - create post model
- - - create post collection (give localstorage code)
  model: PostModel,
  localStorage: new Store('PostCollection')
- - - add to collection and save (in that order)
- - - clear input

render posts steps
- postview
- - classname and template
- - - username and text
- - render

- post collection view
- - classname (no template)
- - render
- - - collection.each, create view for each mode and render it
- - bind collection event to render model

likes
- post model
- - default likes array
- - addLike method
- - - ensure not already in array
- - - add username to array
- - - save
- - - trigger change

- postview
- - add like button and like count to template
- - render
- - - add like count to context
- - event
- - - add to model
- - listen for model change, rerender

create comment
- createcommentview
- - classname and template
- - - input and button
- - render
- - event: click add button
- - - create generic model for comment
- - - add to collection and save
- - - clear input

- comment collection
- - localstorage setup on init (give code)
  initialize: function(options){
    // set the localStorage Store on init because we need
    // the key to reference a specific post id
    var key = 'CommentsForPost:' + options.postId;
    this.localStorage = new Store(key);
  }

render comments
- commentview
- - classname and template
- - - username and text
- - render

- commentcollectionview
- - classname (no template)
- - render
- - - collection.each, create view for each mode and render it

